{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Вариант 1\n",
    "#### Анализ мобильных игр\n",
    "\n",
    "Задачи:\n",
    "\n",
    "1. В первую очередь, его интересует показатель retention. Напишите функцию для его подсчета.\n",
    "\n",
    "2. Помимо этого, в компании провели A/B тестирование наборов акционных предложений. На основе имеющихся данных определите, какой набор можно считать лучшим и на основе каких метрик стоит принять правильное решение.\n",
    "\n",
    "3. Предложите метрики для оценки результатов последнего прошедшего тематического события в игре."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import datetime as dt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Задача 1."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.1. Импорт данных & EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "reg_date = pd.read_csv('~/shared/problem1-reg_data.csv', sep =';') # -  данные о времени регистрации\n",
    "activity = pd.read_csv('~/shared/problem1-auth_data.csv', sep =';') # -  данные о времени захода пользователей в игру"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "reg_date.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "reg_date.isna().value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "reg_date.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "reg_date.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "activity.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "activity.isna().value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "activity.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "activity.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Данные по активности пользователей и дате регистрации указаны в секундах. \n",
    "Переведем их в удобный для восприятия формат.\n",
    "Однако сперва для удобства соберем данные о регистрации пользователей и активностях в единый датасет "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "user_data = activity.merge(reg_date, how = 'left', on ='uid')\n",
    "cols = user_data.columns\n",
    "cols = [cols[1], cols[2], cols[0]]\n",
    "user_data = user_data [cols]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Переведем данные о дате регистрации пользователей и дате захода их в игру в формат datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "user_data['reg_date'] = pd.to_datetime(user_data.reg_ts, unit = 's')\n",
    "user_data['auth_date'] = pd.to_datetime(user_data.auth_ts, unit = 's')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "user_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "user_data = user_data.query('reg_date.dt.year == 2020 & reg_date.dt.month == 1') \n",
    "user_data['reg_date'] = user_data.reg_date.dt.date\n",
    "user_data['auth_date'] = user_data.auth_date.dt.date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "user_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pivot = user_data\\\n",
    "    .groupby(['reg_date','auth_date'], as_index = False) \\\n",
    "    .agg({'uid':'nunique'}) \\\n",
    "     .sort_values('reg_date', ascending = True) \\\n",
    "     .pivot_table(index = ['reg_date'], columns = 'auth_date', values = 'uid', fill_value = 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Посчитаем  Retention"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Создание переменных\n",
    "lst = []\n",
    "retention = pd.DataFrame()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Итерация по сводной таблице и расчет retention в процентах\n",
    "for i in pivot.columns:\n",
    "    lst = (((pivot[i]/(pivot[i].max())))*100).round(2)\n",
    "    retention = retention.append(lst)\n",
    "retention = retention.transpose()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Готовая функция:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def retention(year, month):\n",
    "    import pandas as pd\n",
    "    import datetime as dt\n",
    "    \n",
    "    # импорт данных\n",
    "    reg_date = pd.read_csv('~/shared/problem1-reg_data.csv', sep=';') # -  данные о времени регистрации\n",
    "    activity = pd.read_csv('~/shared/problem1-auth_data.csv', sep=';') # -  данные о времени захода пользователей в игру\n",
    "    \n",
    "    # подготовка данных \n",
    "    user_data = activity.merge(reg_date, how = 'left', on ='uid')\n",
    "    cols = user_data.columns\n",
    "    cols = [cols[1], cols[2], cols[0]]\n",
    "    user_data = user_data [cols]\n",
    "    user_data['reg_date'] = pd.to_datetime(user_data.reg_ts, unit = 's')\n",
    "    user_data['auth_date'] = pd.to_datetime(user_data.auth_ts, unit = 's')\n",
    "    \n",
    "    user_data = user_data.query('reg_date.dt.year == 2020 & reg_date.dt.month == 1') \n",
    "    user_data['reg_date'] = user_data.reg_date.dt.date\n",
    "    user_data['auth_date'] = user_data.auth_date.dt.date\n",
    "    \n",
    "    # группировка данных\n",
    "    pivot = user_data \\\n",
    "        .groupby(['reg_date','auth_date'], as_index=False) \\\n",
    "        .agg({'uid':'nunique'}) \\\n",
    "        .sort_values('reg_date', ascending=True) \\\n",
    "        .pivot_table(index=['reg_date'], columns='auth_date', values='uid', fill_value=0)\n",
    "    \n",
    "    # расчет retention\n",
    "    result = pd.DataFrame()\n",
    "    for i in pivot.columns:\n",
    "        lst = (((pivot[i]/(pivot[i].max())))*100).round(2)\n",
    "        result = result.append(lst)\n",
    "    result = result.transpose()\n",
    "    return result\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/tljh/user/lib/python3.7/site-packages/ipykernel_launcher.py:18: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/opt/tljh/user/lib/python3.7/site-packages/ipykernel_launcher.py:19: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2020-01-01</th>\n",
       "      <th>2020-01-02</th>\n",
       "      <th>2020-01-03</th>\n",
       "      <th>2020-01-04</th>\n",
       "      <th>2020-01-05</th>\n",
       "      <th>2020-01-06</th>\n",
       "      <th>2020-01-07</th>\n",
       "      <th>2020-01-08</th>\n",
       "      <th>2020-01-09</th>\n",
       "      <th>2020-01-10</th>\n",
       "      <th>...</th>\n",
       "      <th>2020-09-14</th>\n",
       "      <th>2020-09-15</th>\n",
       "      <th>2020-09-16</th>\n",
       "      <th>2020-09-17</th>\n",
       "      <th>2020-09-18</th>\n",
       "      <th>2020-09-19</th>\n",
       "      <th>2020-09-20</th>\n",
       "      <th>2020-09-21</th>\n",
       "      <th>2020-09-22</th>\n",
       "      <th>2020-09-23</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-01-01</th>\n",
       "      <td>100.0</td>\n",
       "      <td>2.63</td>\n",
       "      <td>4.51</td>\n",
       "      <td>3.37</td>\n",
       "      <td>5.61</td>\n",
       "      <td>5.79</td>\n",
       "      <td>7.46</td>\n",
       "      <td>4.93</td>\n",
       "      <td>4.37</td>\n",
       "      <td>4.36</td>\n",
       "      <td>...</td>\n",
       "      <td>55.0</td>\n",
       "      <td>54.17</td>\n",
       "      <td>55.0</td>\n",
       "      <td>71.43</td>\n",
       "      <td>66.67</td>\n",
       "      <td>66.67</td>\n",
       "      <td>63.64</td>\n",
       "      <td>57.14</td>\n",
       "      <td>54.55</td>\n",
       "      <td>18.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-02</th>\n",
       "      <td>0.0</td>\n",
       "      <td>100.00</td>\n",
       "      <td>2.35</td>\n",
       "      <td>4.50</td>\n",
       "      <td>5.14</td>\n",
       "      <td>4.77</td>\n",
       "      <td>5.78</td>\n",
       "      <td>7.64</td>\n",
       "      <td>5.86</td>\n",
       "      <td>5.57</td>\n",
       "      <td>...</td>\n",
       "      <td>85.0</td>\n",
       "      <td>58.33</td>\n",
       "      <td>60.0</td>\n",
       "      <td>47.62</td>\n",
       "      <td>47.62</td>\n",
       "      <td>71.43</td>\n",
       "      <td>59.09</td>\n",
       "      <td>95.24</td>\n",
       "      <td>40.91</td>\n",
       "      <td>31.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-03</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>2.34</td>\n",
       "      <td>3.37</td>\n",
       "      <td>4.39</td>\n",
       "      <td>4.48</td>\n",
       "      <td>6.80</td>\n",
       "      <td>7.43</td>\n",
       "      <td>5.39</td>\n",
       "      <td>...</td>\n",
       "      <td>70.0</td>\n",
       "      <td>54.17</td>\n",
       "      <td>85.0</td>\n",
       "      <td>52.38</td>\n",
       "      <td>61.90</td>\n",
       "      <td>33.33</td>\n",
       "      <td>77.27</td>\n",
       "      <td>57.14</td>\n",
       "      <td>63.64</td>\n",
       "      <td>31.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-04</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>1.50</td>\n",
       "      <td>4.49</td>\n",
       "      <td>5.04</td>\n",
       "      <td>5.31</td>\n",
       "      <td>5.67</td>\n",
       "      <td>6.96</td>\n",
       "      <td>...</td>\n",
       "      <td>55.0</td>\n",
       "      <td>50.00</td>\n",
       "      <td>60.0</td>\n",
       "      <td>28.57</td>\n",
       "      <td>66.67</td>\n",
       "      <td>57.14</td>\n",
       "      <td>50.00</td>\n",
       "      <td>52.38</td>\n",
       "      <td>22.73</td>\n",
       "      <td>62.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-05</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>1.96</td>\n",
       "      <td>4.48</td>\n",
       "      <td>4.56</td>\n",
       "      <td>4.37</td>\n",
       "      <td>4.74</td>\n",
       "      <td>...</td>\n",
       "      <td>65.0</td>\n",
       "      <td>33.33</td>\n",
       "      <td>95.0</td>\n",
       "      <td>76.19</td>\n",
       "      <td>71.43</td>\n",
       "      <td>90.48</td>\n",
       "      <td>72.73</td>\n",
       "      <td>61.90</td>\n",
       "      <td>50.00</td>\n",
       "      <td>56.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-06</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>2.89</td>\n",
       "      <td>4.47</td>\n",
       "      <td>4.93</td>\n",
       "      <td>3.81</td>\n",
       "      <td>...</td>\n",
       "      <td>60.0</td>\n",
       "      <td>58.33</td>\n",
       "      <td>80.0</td>\n",
       "      <td>66.67</td>\n",
       "      <td>57.14</td>\n",
       "      <td>57.14</td>\n",
       "      <td>54.55</td>\n",
       "      <td>38.10</td>\n",
       "      <td>59.09</td>\n",
       "      <td>31.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-07</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>1.86</td>\n",
       "      <td>4.83</td>\n",
       "      <td>4.36</td>\n",
       "      <td>...</td>\n",
       "      <td>60.0</td>\n",
       "      <td>54.17</td>\n",
       "      <td>85.0</td>\n",
       "      <td>66.67</td>\n",
       "      <td>57.14</td>\n",
       "      <td>57.14</td>\n",
       "      <td>63.64</td>\n",
       "      <td>61.90</td>\n",
       "      <td>72.73</td>\n",
       "      <td>50.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-08</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>2.23</td>\n",
       "      <td>3.99</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.00</td>\n",
       "      <td>100.0</td>\n",
       "      <td>76.19</td>\n",
       "      <td>57.14</td>\n",
       "      <td>76.19</td>\n",
       "      <td>90.91</td>\n",
       "      <td>52.38</td>\n",
       "      <td>95.45</td>\n",
       "      <td>56.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-09</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>1.86</td>\n",
       "      <td>...</td>\n",
       "      <td>90.0</td>\n",
       "      <td>54.17</td>\n",
       "      <td>90.0</td>\n",
       "      <td>57.14</td>\n",
       "      <td>76.19</td>\n",
       "      <td>66.67</td>\n",
       "      <td>72.73</td>\n",
       "      <td>61.90</td>\n",
       "      <td>59.09</td>\n",
       "      <td>37.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-10</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>100.00</td>\n",
       "      <td>...</td>\n",
       "      <td>60.0</td>\n",
       "      <td>75.00</td>\n",
       "      <td>55.0</td>\n",
       "      <td>80.95</td>\n",
       "      <td>71.43</td>\n",
       "      <td>47.62</td>\n",
       "      <td>45.45</td>\n",
       "      <td>66.67</td>\n",
       "      <td>77.27</td>\n",
       "      <td>25.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-11</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>50.0</td>\n",
       "      <td>45.83</td>\n",
       "      <td>65.0</td>\n",
       "      <td>47.62</td>\n",
       "      <td>47.62</td>\n",
       "      <td>57.14</td>\n",
       "      <td>40.91</td>\n",
       "      <td>71.43</td>\n",
       "      <td>63.64</td>\n",
       "      <td>50.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-12</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>75.0</td>\n",
       "      <td>66.67</td>\n",
       "      <td>85.0</td>\n",
       "      <td>80.95</td>\n",
       "      <td>95.24</td>\n",
       "      <td>71.43</td>\n",
       "      <td>100.00</td>\n",
       "      <td>52.38</td>\n",
       "      <td>100.00</td>\n",
       "      <td>100.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-13</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>60.0</td>\n",
       "      <td>66.67</td>\n",
       "      <td>60.0</td>\n",
       "      <td>71.43</td>\n",
       "      <td>66.67</td>\n",
       "      <td>71.43</td>\n",
       "      <td>68.18</td>\n",
       "      <td>71.43</td>\n",
       "      <td>77.27</td>\n",
       "      <td>43.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-14</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>80.0</td>\n",
       "      <td>66.67</td>\n",
       "      <td>95.0</td>\n",
       "      <td>80.95</td>\n",
       "      <td>61.90</td>\n",
       "      <td>33.33</td>\n",
       "      <td>100.00</td>\n",
       "      <td>71.43</td>\n",
       "      <td>95.45</td>\n",
       "      <td>25.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-15</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>80.0</td>\n",
       "      <td>45.83</td>\n",
       "      <td>100.0</td>\n",
       "      <td>61.90</td>\n",
       "      <td>38.10</td>\n",
       "      <td>85.71</td>\n",
       "      <td>50.00</td>\n",
       "      <td>52.38</td>\n",
       "      <td>90.91</td>\n",
       "      <td>37.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-16</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>41.67</td>\n",
       "      <td>65.0</td>\n",
       "      <td>80.95</td>\n",
       "      <td>47.62</td>\n",
       "      <td>66.67</td>\n",
       "      <td>54.55</td>\n",
       "      <td>95.24</td>\n",
       "      <td>54.55</td>\n",
       "      <td>87.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-17</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>60.0</td>\n",
       "      <td>50.00</td>\n",
       "      <td>60.0</td>\n",
       "      <td>71.43</td>\n",
       "      <td>28.57</td>\n",
       "      <td>71.43</td>\n",
       "      <td>45.45</td>\n",
       "      <td>66.67</td>\n",
       "      <td>45.45</td>\n",
       "      <td>31.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-18</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>55.0</td>\n",
       "      <td>58.33</td>\n",
       "      <td>65.0</td>\n",
       "      <td>42.86</td>\n",
       "      <td>61.90</td>\n",
       "      <td>61.90</td>\n",
       "      <td>72.73</td>\n",
       "      <td>28.57</td>\n",
       "      <td>68.18</td>\n",
       "      <td>68.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-19</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>55.0</td>\n",
       "      <td>58.33</td>\n",
       "      <td>65.0</td>\n",
       "      <td>90.48</td>\n",
       "      <td>42.86</td>\n",
       "      <td>61.90</td>\n",
       "      <td>81.82</td>\n",
       "      <td>61.90</td>\n",
       "      <td>63.64</td>\n",
       "      <td>43.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-20</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>85.0</td>\n",
       "      <td>58.33</td>\n",
       "      <td>40.0</td>\n",
       "      <td>66.67</td>\n",
       "      <td>61.90</td>\n",
       "      <td>80.95</td>\n",
       "      <td>77.27</td>\n",
       "      <td>66.67</td>\n",
       "      <td>59.09</td>\n",
       "      <td>68.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-21</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>65.0</td>\n",
       "      <td>54.17</td>\n",
       "      <td>70.0</td>\n",
       "      <td>66.67</td>\n",
       "      <td>85.71</td>\n",
       "      <td>52.38</td>\n",
       "      <td>68.18</td>\n",
       "      <td>76.19</td>\n",
       "      <td>36.36</td>\n",
       "      <td>56.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-22</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>60.0</td>\n",
       "      <td>45.83</td>\n",
       "      <td>40.0</td>\n",
       "      <td>42.86</td>\n",
       "      <td>76.19</td>\n",
       "      <td>47.62</td>\n",
       "      <td>59.09</td>\n",
       "      <td>66.67</td>\n",
       "      <td>36.36</td>\n",
       "      <td>37.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-23</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>75.0</td>\n",
       "      <td>50.00</td>\n",
       "      <td>75.0</td>\n",
       "      <td>33.33</td>\n",
       "      <td>57.14</td>\n",
       "      <td>47.62</td>\n",
       "      <td>40.91</td>\n",
       "      <td>100.00</td>\n",
       "      <td>40.91</td>\n",
       "      <td>62.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-24</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>55.0</td>\n",
       "      <td>58.33</td>\n",
       "      <td>60.0</td>\n",
       "      <td>85.71</td>\n",
       "      <td>76.19</td>\n",
       "      <td>100.00</td>\n",
       "      <td>22.73</td>\n",
       "      <td>80.95</td>\n",
       "      <td>59.09</td>\n",
       "      <td>62.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-25</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>65.0</td>\n",
       "      <td>79.17</td>\n",
       "      <td>40.0</td>\n",
       "      <td>47.62</td>\n",
       "      <td>61.90</td>\n",
       "      <td>52.38</td>\n",
       "      <td>63.64</td>\n",
       "      <td>42.86</td>\n",
       "      <td>50.00</td>\n",
       "      <td>50.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-26</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>55.0</td>\n",
       "      <td>83.33</td>\n",
       "      <td>85.0</td>\n",
       "      <td>66.67</td>\n",
       "      <td>95.24</td>\n",
       "      <td>61.90</td>\n",
       "      <td>59.09</td>\n",
       "      <td>90.48</td>\n",
       "      <td>45.45</td>\n",
       "      <td>87.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-27</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>55.0</td>\n",
       "      <td>50.00</td>\n",
       "      <td>60.0</td>\n",
       "      <td>80.95</td>\n",
       "      <td>61.90</td>\n",
       "      <td>66.67</td>\n",
       "      <td>77.27</td>\n",
       "      <td>71.43</td>\n",
       "      <td>72.73</td>\n",
       "      <td>18.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-28</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>40.0</td>\n",
       "      <td>37.50</td>\n",
       "      <td>80.0</td>\n",
       "      <td>57.14</td>\n",
       "      <td>100.00</td>\n",
       "      <td>42.86</td>\n",
       "      <td>45.45</td>\n",
       "      <td>57.14</td>\n",
       "      <td>59.09</td>\n",
       "      <td>87.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-29</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>65.0</td>\n",
       "      <td>58.33</td>\n",
       "      <td>70.0</td>\n",
       "      <td>100.00</td>\n",
       "      <td>33.33</td>\n",
       "      <td>52.38</td>\n",
       "      <td>63.64</td>\n",
       "      <td>95.24</td>\n",
       "      <td>54.55</td>\n",
       "      <td>43.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-30</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>65.0</td>\n",
       "      <td>66.67</td>\n",
       "      <td>70.0</td>\n",
       "      <td>80.95</td>\n",
       "      <td>61.90</td>\n",
       "      <td>61.90</td>\n",
       "      <td>59.09</td>\n",
       "      <td>76.19</td>\n",
       "      <td>54.55</td>\n",
       "      <td>56.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-31</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>55.0</td>\n",
       "      <td>58.33</td>\n",
       "      <td>45.0</td>\n",
       "      <td>61.90</td>\n",
       "      <td>76.19</td>\n",
       "      <td>76.19</td>\n",
       "      <td>45.45</td>\n",
       "      <td>61.90</td>\n",
       "      <td>68.18</td>\n",
       "      <td>25.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>31 rows × 267 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            2020-01-01  2020-01-02  2020-01-03  2020-01-04  2020-01-05  \\\n",
       "2020-01-01       100.0        2.63        4.51        3.37        5.61   \n",
       "2020-01-02         0.0      100.00        2.35        4.50        5.14   \n",
       "2020-01-03         0.0        0.00      100.00        2.34        3.37   \n",
       "2020-01-04         0.0        0.00        0.00      100.00        1.50   \n",
       "2020-01-05         0.0        0.00        0.00        0.00      100.00   \n",
       "2020-01-06         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-07         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-08         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-09         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-10         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-11         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-12         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-13         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-14         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-15         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-16         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-17         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-18         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-19         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-20         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-21         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-22         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-23         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-24         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-25         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-26         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-27         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-28         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-29         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-30         0.0        0.00        0.00        0.00        0.00   \n",
       "2020-01-31         0.0        0.00        0.00        0.00        0.00   \n",
       "\n",
       "            2020-01-06  2020-01-07  2020-01-08  2020-01-09  2020-01-10  ...  \\\n",
       "2020-01-01        5.79        7.46        4.93        4.37        4.36  ...   \n",
       "2020-01-02        4.77        5.78        7.64        5.86        5.57  ...   \n",
       "2020-01-03        4.39        4.48        6.80        7.43        5.39  ...   \n",
       "2020-01-04        4.49        5.04        5.31        5.67        6.96  ...   \n",
       "2020-01-05        1.96        4.48        4.56        4.37        4.74  ...   \n",
       "2020-01-06      100.00        2.89        4.47        4.93        3.81  ...   \n",
       "2020-01-07        0.00      100.00        1.86        4.83        4.36  ...   \n",
       "2020-01-08        0.00        0.00      100.00        2.23        3.99  ...   \n",
       "2020-01-09        0.00        0.00        0.00      100.00        1.86  ...   \n",
       "2020-01-10        0.00        0.00        0.00        0.00      100.00  ...   \n",
       "2020-01-11        0.00        0.00        0.00        0.00        0.00  ...   \n",
       "2020-01-12        0.00        0.00        0.00        0.00        0.00  ...   \n",
       "2020-01-13        0.00        0.00        0.00        0.00        0.00  ...   \n",
       "2020-01-14        0.00        0.00        0.00        0.00        0.00  ...   \n",
       "2020-01-15        0.00        0.00        0.00        0.00        0.00  ...   \n",
       "2020-01-16        0.00        0.00        0.00        0.00        0.00  ...   \n",
       "2020-01-17        0.00        0.00        0.00        0.00        0.00  ...   \n",
       "2020-01-18        0.00        0.00        0.00        0.00        0.00  ...   \n",
       "2020-01-19        0.00        0.00        0.00        0.00        0.00  ...   \n",
       "2020-01-20        0.00        0.00        0.00        0.00        0.00  ...   \n",
       "2020-01-21        0.00        0.00        0.00        0.00        0.00  ...   \n",
       "2020-01-22        0.00        0.00        0.00        0.00        0.00  ...   \n",
       "2020-01-23        0.00        0.00        0.00        0.00        0.00  ...   \n",
       "2020-01-24        0.00        0.00        0.00        0.00        0.00  ...   \n",
       "2020-01-25        0.00        0.00        0.00        0.00        0.00  ...   \n",
       "2020-01-26        0.00        0.00        0.00        0.00        0.00  ...   \n",
       "2020-01-27        0.00        0.00        0.00        0.00        0.00  ...   \n",
       "2020-01-28        0.00        0.00        0.00        0.00        0.00  ...   \n",
       "2020-01-29        0.00        0.00        0.00        0.00        0.00  ...   \n",
       "2020-01-30        0.00        0.00        0.00        0.00        0.00  ...   \n",
       "2020-01-31        0.00        0.00        0.00        0.00        0.00  ...   \n",
       "\n",
       "            2020-09-14  2020-09-15  2020-09-16  2020-09-17  2020-09-18  \\\n",
       "2020-01-01        55.0       54.17        55.0       71.43       66.67   \n",
       "2020-01-02        85.0       58.33        60.0       47.62       47.62   \n",
       "2020-01-03        70.0       54.17        85.0       52.38       61.90   \n",
       "2020-01-04        55.0       50.00        60.0       28.57       66.67   \n",
       "2020-01-05        65.0       33.33        95.0       76.19       71.43   \n",
       "2020-01-06        60.0       58.33        80.0       66.67       57.14   \n",
       "2020-01-07        60.0       54.17        85.0       66.67       57.14   \n",
       "2020-01-08       100.0      100.00       100.0       76.19       57.14   \n",
       "2020-01-09        90.0       54.17        90.0       57.14       76.19   \n",
       "2020-01-10        60.0       75.00        55.0       80.95       71.43   \n",
       "2020-01-11        50.0       45.83        65.0       47.62       47.62   \n",
       "2020-01-12        75.0       66.67        85.0       80.95       95.24   \n",
       "2020-01-13        60.0       66.67        60.0       71.43       66.67   \n",
       "2020-01-14        80.0       66.67        95.0       80.95       61.90   \n",
       "2020-01-15        80.0       45.83       100.0       61.90       38.10   \n",
       "2020-01-16       100.0       41.67        65.0       80.95       47.62   \n",
       "2020-01-17        60.0       50.00        60.0       71.43       28.57   \n",
       "2020-01-18        55.0       58.33        65.0       42.86       61.90   \n",
       "2020-01-19        55.0       58.33        65.0       90.48       42.86   \n",
       "2020-01-20        85.0       58.33        40.0       66.67       61.90   \n",
       "2020-01-21        65.0       54.17        70.0       66.67       85.71   \n",
       "2020-01-22        60.0       45.83        40.0       42.86       76.19   \n",
       "2020-01-23        75.0       50.00        75.0       33.33       57.14   \n",
       "2020-01-24        55.0       58.33        60.0       85.71       76.19   \n",
       "2020-01-25        65.0       79.17        40.0       47.62       61.90   \n",
       "2020-01-26        55.0       83.33        85.0       66.67       95.24   \n",
       "2020-01-27        55.0       50.00        60.0       80.95       61.90   \n",
       "2020-01-28        40.0       37.50        80.0       57.14      100.00   \n",
       "2020-01-29        65.0       58.33        70.0      100.00       33.33   \n",
       "2020-01-30        65.0       66.67        70.0       80.95       61.90   \n",
       "2020-01-31        55.0       58.33        45.0       61.90       76.19   \n",
       "\n",
       "            2020-09-19  2020-09-20  2020-09-21  2020-09-22  2020-09-23  \n",
       "2020-01-01       66.67       63.64       57.14       54.55       18.75  \n",
       "2020-01-02       71.43       59.09       95.24       40.91       31.25  \n",
       "2020-01-03       33.33       77.27       57.14       63.64       31.25  \n",
       "2020-01-04       57.14       50.00       52.38       22.73       62.50  \n",
       "2020-01-05       90.48       72.73       61.90       50.00       56.25  \n",
       "2020-01-06       57.14       54.55       38.10       59.09       31.25  \n",
       "2020-01-07       57.14       63.64       61.90       72.73       50.00  \n",
       "2020-01-08       76.19       90.91       52.38       95.45       56.25  \n",
       "2020-01-09       66.67       72.73       61.90       59.09       37.50  \n",
       "2020-01-10       47.62       45.45       66.67       77.27       25.00  \n",
       "2020-01-11       57.14       40.91       71.43       63.64       50.00  \n",
       "2020-01-12       71.43      100.00       52.38      100.00      100.00  \n",
       "2020-01-13       71.43       68.18       71.43       77.27       43.75  \n",
       "2020-01-14       33.33      100.00       71.43       95.45       25.00  \n",
       "2020-01-15       85.71       50.00       52.38       90.91       37.50  \n",
       "2020-01-16       66.67       54.55       95.24       54.55       87.50  \n",
       "2020-01-17       71.43       45.45       66.67       45.45       31.25  \n",
       "2020-01-18       61.90       72.73       28.57       68.18       68.75  \n",
       "2020-01-19       61.90       81.82       61.90       63.64       43.75  \n",
       "2020-01-20       80.95       77.27       66.67       59.09       68.75  \n",
       "2020-01-21       52.38       68.18       76.19       36.36       56.25  \n",
       "2020-01-22       47.62       59.09       66.67       36.36       37.50  \n",
       "2020-01-23       47.62       40.91      100.00       40.91       62.50  \n",
       "2020-01-24      100.00       22.73       80.95       59.09       62.50  \n",
       "2020-01-25       52.38       63.64       42.86       50.00       50.00  \n",
       "2020-01-26       61.90       59.09       90.48       45.45       87.50  \n",
       "2020-01-27       66.67       77.27       71.43       72.73       18.75  \n",
       "2020-01-28       42.86       45.45       57.14       59.09       87.50  \n",
       "2020-01-29       52.38       63.64       95.24       54.55       43.75  \n",
       "2020-01-30       61.90       59.09       76.19       54.55       56.25  \n",
       "2020-01-31       76.19       45.45       61.90       68.18       25.00  \n",
       "\n",
       "[31 rows x 267 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "retention(2020,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "user_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Задача 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/tljh/user/lib/python3.7/site-packages/outdated/utils.py:18: OutdatedCacheFailedWarning: Failed to use cache while checking for outdated package.\n",
      "Set the environment variable OUTDATED_RAISE_EXCEPTION=1 for a full traceback.\n",
      "Set the environment variable OUTDATED_IGNORE=1 to disable these warnings.\n",
      "  **kwargs\n",
      "/opt/tljh/user/lib/python3.7/site-packages/outdated/utils.py:18: OutdatedPackageWarning: The package outdated is out of date. Your version is 0.2.1, the latest is 0.2.2.\n",
      "Set the environment variable OUTDATED_IGNORE=1 to disable these warnings.\n",
      "  **kwargs\n",
      "/opt/tljh/user/lib/python3.7/site-packages/outdated/utils.py:18: OutdatedPackageWarning: The package pingouin is out of date. Your version is 0.4.0, the latest is 0.5.3.\n",
      "Set the environment variable OUTDATED_IGNORE=1 to disable these warnings.\n",
      "  **kwargs\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from scipy.stats import norm, mannwhitneyu, ttest_ind, normaltest\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import pingouin as pg\n",
    "\n",
    "import requests \n",
    "from urllib.parse import urlencode \n",
    "\n",
    "from tqdm.auto import tqdm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Задача:\n",
    "Имеются результаты A/B теста, в котором двум группам пользователей предлагались различные наборы акционных предложений. Известно, что ARPU в тестовой группе выше на 5%, чем в контрольной. При этом в контрольной группе 1928 игроков из 202103 оказались платящими, а в тестовой – 1805 из 202667.\n",
    "\n",
    "Какой набор предложений можно считать лучшим? Какие метрики стоит проанализировать для принятия правильного решения и как?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "####  2.1. Оценим стат.значимость полученного в результате эксперимента результата. Для этого импортируем данные и проанализируем их. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Сначала импортируем данные и проведем EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# используем api \n",
    "base_url = 'https://cloud-api.yandex.net/v1/disk/public/resources/download?' \n",
    "public_key = 'https://disk.yandex.ru/d/SOkIsD5A8xlI7Q' \n",
    " \n",
    "# получаем url \n",
    "final_url = base_url + urlencode(dict(public_key=public_key)) \n",
    "response = requests.get(final_url) \n",
    "download_url = response.json()['href'] \n",
    " \n",
    "# загружаем файл в df \n",
    "download_response = requests.get(download_url) \n",
    "df = pd.read_csv(download_url, sep=';') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>revenue</th>\n",
       "      <th>testgroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>b</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>b</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>b</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  revenue testgroup\n",
       "0        1        0         b\n",
       "1        2        0         a\n",
       "2        3        0         a\n",
       "3        4        0         b\n",
       "4        5        0         b"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(404770, 3)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id  revenue  testgroup\n",
       "False    False    False        404770\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим на распределение данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f576d128940>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 416x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(data = df, x = 'revenue', hue = 'testgroup')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Распределение смещено влево.\n",
    "Попробуем убрать выбросы"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Через логарифмирование\n",
    "df['revenue_log'] = np.log(df.query('revenue > 0').revenue)\n",
    "df['revenue_log'] = df['revenue_log'].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f5789a054a8>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(data = df.query('testgroup == \"a\" and 35000 > revenue > 0'), x = 'revenue_log')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f57898fda20>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(data = df.query('testgroup == \"b\" and 35000 > revenue > 0'), x = 'revenue_log')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f57a85fb1d0>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(data = df.query('testgroup == \"a\" and 35000 > revenue > 0'), x = 'revenue')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f578a032f98>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pg.qqplot(df.query('testgroup == \"a\" and 35000 > revenue > 0 ').revenue)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f576d295518>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(data = df.query('testgroup == \"b\" and 35000 > revenue > 0'), x = 'revenue')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f576d2954e0>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pg.qqplot(df.query('testgroup == \"b\" and 35000 > revenue > 0').revenue)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f576d113748>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pg.qqplot(df.query('testgroup == \"a\" and 35000 > revenue > 0 ').revenue_log)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f576d102ac8>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pg.qqplot(df.query('testgroup == \"b\" and 35000 > revenue > 0 ').revenue_log)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Трансформация исходных данных не помогла. Распределение все еще далеко от нормального.\n",
    "В таком случае для оценки стат. значимости полученного результата используем тест Манна-Уитни"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>revenue</th>\n",
       "      <th>testgroup</th>\n",
       "      <th>revenue_log</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>b</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>b</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>b</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  revenue testgroup  revenue_log\n",
       "0        1        0         b          0.0\n",
       "1        2        0         a          0.0\n",
       "2        3        0         a          0.0\n",
       "3        4        0         b          0.0\n",
       "4        5        0         b          0.0"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Перед проведением теста отсечем пользователей с отрицательной выручкой, т.к. это вероятнее всего ошибка"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "a = df.query('testgroup == \"a\" and revenue > 0')\n",
    "b = df.query('testgroup == \"b\" and revenue > 0')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MannwhitneyuResult(statistic=222015.0, pvalue=0.0)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mannwhitneyu(a.revenue,b.revenue,method=\"auto\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Результат теста показывает, что мы отклонить нулевую гипотезу о равенстве средних суммы рангов в двух выборках, т.к. pvalue выше порога стат. значимости 5%.\n",
    "\n",
    "\n",
    "###### Следовательно изменения в результате эксперимента не привели к стат. значимому результату в выручке"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Дополнительно проведем еще один тест и оценим разницу между медианами в группах"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>revenue</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>testgroup</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>a</th>\n",
       "      <td>311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b</th>\n",
       "      <td>3022</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           revenue\n",
       "testgroup         \n",
       "a              311\n",
       "b             3022"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.query('revenue > 0').groupby('testgroup').agg({'revenue':np.median})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Медианы в группах отличаются кратно. Проверим стат.значимость этих различий с помощью bootstrap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a208ed8d827645e9a9f3803a8c292e5f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=10000.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "a_confidence_interval: [308.0, 315.0]\n",
      "b_confidence_interval: [2970.0, 3072.0]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f574cfe4e10>"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "p = 0.05\n",
    "a_medians = []\n",
    "b_medians = []\n",
    "n = 10000\n",
    "for i in tqdm(range (n)):\n",
    "    a_sample = a.sample(frac = 1, replace = True)\n",
    "    a_median = a_sample.revenue.median()\n",
    "    a_medians.append(a_median)\n",
    "\n",
    "    b_sample = b.sample(frac = 1, replace = True)\n",
    "    b_median = b_sample.revenue.median()\n",
    "    b_medians.append(b_median)\n",
    "\n",
    "a_confidence_interval = [pd.Series(a_medians).quantile(p/2),pd.Series(a_medians).quantile(1-p/2)]\n",
    "b_confidence_interval = [pd.Series(b_medians).quantile(p/2),pd.Series(b_medians).quantile(1-p/2)]\n",
    "\n",
    "print('a_confidence_interval: '+ str(a_confidence_interval))\n",
    "print('b_confidence_interval: '+ str(b_confidence_interval))\n",
    "\n",
    "sns.histplot(a_confidence_interval)\n",
    "sns.histplot(b_confidence_interval)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2й вариант бутстрапа (через разницу медиан):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0b2f78c8a456401cac48be3682f2956d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=10000.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "confidence_interval: [2728.0, 2728.0]\n"
     ]
    }
   ],
   "source": [
    "p = 0.05\n",
    "median_diff = []\n",
    "n = 10000\n",
    "for i in tqdm(range (n)):\n",
    "    a_sample = a.sample(frac = 1, replace = True)\n",
    "    a_median = a_sample.revenue.median()\n",
    "\n",
    "    b_sample = b.sample(frac = 1, replace = True)\n",
    "    b_median = b_sample.revenue.median()\n",
    "\n",
    "    a_b_diff = b_median - a_median\n",
    "    median_diff.append(a_b_diff)\n",
    "\n",
    "confidence_interval = [pd.Series(a_b_diff).quantile(p/2),pd.Series(a_b_diff).quantile(1-p/2)]\n",
    "\n",
    "\n",
    "print('confidence_interval: '+ str(confidence_interval))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "По результатам Bootstratp доверительные интервалы для медиан в 2х выборках при p = 5% не пересекаются, что говорит о статистически значимом разнице между медианами выручки в каждой и групп и соответственно о стат. значимом результате эксперимента."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.2. Теперь, когда мы подтвердили стат. значимость полученного результата , определим стоит ли принимать результаты изменений"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Определим конверсию в платящего пользователя для тестовой и контрольной группы группы"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cr_test cr_control cr_delta\n",
      "0.0089 0.0095 -0.0664\n"
     ]
    }
   ],
   "source": [
    "cr_test = 1805/202667\n",
    "cr_control = 1928/202103\n",
    "cr_delta = cr_test/cr_control - 1\n",
    "print('cr_test','cr_control','cr_delta')\n",
    "print(round(cr_test,4), round(cr_control,4), round(cr_delta,4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В контрольной группе конверсия в платящего пользователя была выше.\n",
    "Чтобы принять финальное решение оценим изменение ARPPU в тестовой группе в сравнении с контрольной:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1) effect = ARPPU_test/ARPPU_control - 1\n",
    "\n",
    "2) ARPPU_test = ARPU_test/cr_test\n",
    "   ARPU_test = ARPU_control*(1+0.05)\n",
    "   cr_test = (1+cr_delta)*cr_control\n",
    "   ARPPU_test = ARPU_control*(1+0.05)/(1+cr_delta)*cr_control\n",
    "\n",
    "3) ARPPU_control = ARPU_control/cr_control\n",
    "\n",
    "4) effect = (ARPU_control*(1+0.05)/(1+cr_delta)*cr_control) / (ARPU_control/cr_control - 1\n",
    "   effect = (1+0.05)/(1+cr_delta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.1246811105327208"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "effect = (1+0.05)/(1+cr_delta) - 1\n",
    "effect"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Ответ: принимаем результаты изменений (тестовая группа) т.к. в тестовой группе прирост ARPPU на 12.5% выше"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Задача 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.1.\n",
    "В игре Plants & Gardens каждый месяц проводятся тематические события, ограниченные по времени. В них игроки могут получить уникальные предметы для сада и персонажей, дополнительные монеты или бонусы. Для получения награды требуется пройти ряд уровней за определенное время. С помощью каких метрик можно оценить результаты последнего прошедшего события?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ответ:\n",
    "\n",
    "###### Для оценки результатов последнего прошедшего события  можно использовать следующие метрики:\n",
    "1. Метрики активности:\n",
    "   - DAU, если события проводятся несколько дней    \n",
    "   - Доля новых пользователей\n",
    "   - Долю игроков, принимающих участие в событиях от общего числа игроков\n",
    "   - Retention\n",
    "    \n",
    "2. Метрики вовлеченности:\n",
    "    - Среднее время сессии игрока, т.е. количество времени, которое игрок проводит в игре  \n",
    "    - Среднее количество пройденных уровней на игрока - эту метрику я бы использовал в качестве Northern star metric\n",
    "    - Количество заработанных предметов/ монет/ бонусов на игрока - опциональная метрика, необходимая для того, чтобы оценить насколько пользователи заинтересованы в приобритении конкретных наград. \n",
    "    - Количество потраченных монет/бонусов/ энергии на игрока - метрика позволяет определить насколько игроки готовы вкладываться прохождение уровней события\n",
    "\n",
    "##### Метрики из п. 2. имеет смысл анализировать в сравнении по 3м сегментам:\n",
    "1. Игроки, участвовших хотя бы 1 раз в любом из событий\n",
    "2. Игроки, никогда не участвовашие в событиях\n",
    "3. Новые игроки, пришедшие во время события"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.2.\n",
    "Предположим, в другом событии мы усложнили механику событий так, что при каждой неудачной попытке выполнения уровня игрок будет откатываться на несколько уровней назад. Изменится ли набор метрик оценки результата? Если да, то как?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ответ:\n",
    "В таком случае будет полезно добавить следующие метрики: \n",
    "1. Retention по этапам прохождения уровней в событии, которая будет показывать как много игроков проходят событие до конца и на каком уровне отваливаются. \n",
    "2. Доля неудачных попыток от всех попыток игрока на уровне. Метрика выполняет аналогичную цель\n",
    "3. Среднее время прохождение уровня. Позволяет определить самый сложный уровень\n",
    "4. Количество потраченных жизней. Позволяет определить самый сложный уровень\n",
    "\n",
    "Метрики позволят управлять сложностью уровней, чтобы соблюдать баланс между заинтересованностью пользователя и его уровнем раздражения.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
